/**
 * @jest-environment jsdom
 */
jest.useFakeTimers();
require('@testing-library/jest-dom');

describe('loadLang ‚Äî –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã', () => {
  beforeEach(() => {
    // üß©  –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º DOM, –∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    document.body.innerHTML = `
      <header class="top-bar">
        <div class="controls">
          <div class="language-selector">
            <button class="lang-btn active" data-lang="en">EN</button>
            <button class="lang-btn" data-lang="es">ES</button>
            <button class="lang-btn" data-lang="ru">RU</button>
          </div>
          <button id="theme-toggle">‚òÄÔ∏è / üåô</button>
        </div>
      </header>
      <main id="content" class="fade"></main>
    `;

    // üí° –ë–∞–∑–æ–≤—ã–π –º–æ–∫ fetch ‚Äî –£–°–ü–ï–®–ù–´–ô –æ—Ç–≤–µ—Ç (–≤–∞–∂–Ω–æ: ok: true –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ res.ok)
    global.fetch = jest.fn(() =>
      Promise.resolve({
        ok: true,
        json: () =>
          Promise.resolve({
            name: "Catherine Petrenko",
            subtitle: "System-thinking PM",
            skillsTitle: "Skills",
            skills: ["Leadership", "System Thinking"],
            aboutTitle: "About",
            aboutText: ["Paragraph 1", "Paragraph 2"]
          })
      })
    );

    // üß† –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç (–æ–Ω —Å–∞–º –Ω–∞–≤–µ—Å–∏—Ç —Å–ª—É—à–∞—Ç–µ–ª—å DOMContentLoaded)
    jest.isolateModules(() => {
      require('../script.js');
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
    jest.restoreAllMocks();
  });

  // üîß –§–ª—à–∏–º microtasks (–ø—Ä–æ–º–∏—Å—ã)
  const flush = () => Promise.resolve();

  // --- A) show —Å–Ω–∏–º–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 200 –º—Å ---
  test('–ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ show —Å–Ω–∏–º–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É, –∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 200 –º—Å –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–Ω–æ–≤–∞', async () => {
    document.dispatchEvent(new Event('DOMContentLoaded'));

    // –î–æ–∂–¥–∞—Ç—å—Å—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ EN –∏ –ø–æ—è–≤–ª–µ–Ω–∏—è show
    await flush();              // –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ fetch
    await flush();              // –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ res.json
    jest.advanceTimersByTime(200); // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å setTimeout(200)

    const content = document.getElementById('content');
    expect(content.classList.contains('show')).toBe(true);

    // –ö–ª–∏–∫–∞–µ–º –ø–æ ES ‚Üí show –¥–æ–ª–∂–µ–Ω —É–π—Ç–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    document.querySelector('.lang-btn[data-lang="es"]').click();
    expect(content.classList.contains('show')).toBe(false);

    // –î–ê–Å–ú –ü–û–°–¢–ê–í–ò–¢–¨–°–Ø setTimeout(200): –æ–Ω —Å—Ç–∞–≤–∏—Ç—Å—è –ü–û–°–õ–ï fetch/json
    await flush();              // –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ fetch
    await flush();              // –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ res.json

    // –î–æ 200 –º—Å show –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è
    jest.advanceTimersByTime(199);
    expect(content.classList.contains('show')).toBe(false);

    // –ü–æ—Å–ª–µ 200 –º—Å ‚Äî –æ–±—Ä–∞—Ç–Ω–æ
    jest.advanceTimersByTime(1);
    expect(content.classList.contains('show')).toBe(true);
  });

  // --- C) –ü—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –≤ JSON –Ω–µ –ª–æ–º–∞—é—Ç —Ä–∞–∑–º–µ—Ç–∫—É ---
  test('–ø—É—Å—Ç—ã–µ skills/aboutText –Ω–µ –ª–æ–º–∞—é—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫—É', async () => {
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∫ –¥–ª—è –≠–¢–û–ì–û —Ç–µ—Å—Ç–∞ (—á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏)
    global.fetch.mockReset();
    global.fetch.mockImplementation(() =>
      Promise.resolve({
        ok: true,
        json: () =>
          Promise.resolve({
            name: "Catherine Petrenko",
            subtitle: "System-thinking PM",
            skillsTitle: "Skills",
            skills: [],              // ‚Üê –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            aboutTitle: "About",
            aboutText: []            // ‚Üê –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
          })
      })
    );

    document.dispatchEvent(new Event('DOMContentLoaded'));

    // –ñ–¥—ë–º –æ–±–∞ –º–∏–∫—Ä–æ—Ü–∏–∫–ª–∞ –∏ 200 –º—Å –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    await flush();
    await flush();
    jest.advanceTimersByTime(200);

    const html = document.getElementById('content').innerHTML;
    expect(html).toContain('<h2>Skills</h2>');
    expect(html).toContain('<ul></ul>');
    expect(html).toContain('<h2>About</h2>');
  });

  // --- D) HTTP –æ—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ show –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
  test('HTTP –æ—à–∏–±–∫–∞ (res.ok=false) –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç show', async () => {
    // –ø—Ä–∏–≥–ª—É—à–∞–µ–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    const spy = jest.spyOn(console, 'error').mockImplementation(() => {});

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∫ –¥–ª—è –≠–¢–û–ì–û —Ç–µ—Å—Ç–∞ (—á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å 404)
    global.fetch.mockReset();
    global.fetch.mockImplementation(() =>
      Promise.resolve({ ok: false, status: 404, json: () => Promise.resolve({}) })
    );

    document.dispatchEvent(new Event('DOMContentLoaded'));

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ fetch/json (–æ—à–∏–±–æ—á–Ω–æ–≥–æ) ‚Äî setTimeout –Ω–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—Å—è, show –Ω–µ –≤–µ—Ä–Ω—ë—Ç—Å—è
    await flush();
    await flush();
    jest.advanceTimersByTime(200);

    const content = document.getElementById('content');
    expect(content.classList.contains('show')).toBe(false);
    expect(content.innerHTML).not.toContain('<h1>');

    // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ console.error
    spy.mockRestore();
  });
});
