/**
 * @jest-environment jsdom
 */
jest.useFakeTimers();
require('@testing-library/jest-dom');

describe('loadLang / theme ‚Äî —Å—Ç—Ä–µ—Å—Å–æ–≤—ã–µ –∫–µ–π—Å—ã', () => {
  const langs = ['en', 'es', 'ru'];
  const btn = (code) => document.querySelector(`.lang-btn[data-lang="${code}"]`);
  const flush = () => Promise.resolve();

  beforeEach(() => {
    // üß©  –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º DOM, –∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    document.body.innerHTML = `
      <header class="top-bar">
        <div class="controls">
          <div class="language-selector">
            <button class="lang-btn active" data-lang="en">EN</button>
            <button class="lang-btn" data-lang="es">ES</button>
            <button class="lang-btn" data-lang="ru">RU</button>
          </div>
          <button id="theme-toggle">‚òÄÔ∏è / üåô</button>
        </div>
      </header>
      <main id="content" class="fade"></main>
    `;

    // üß† –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç (–æ–Ω —Å–∞–º –Ω–∞–≤–µ—Å–∏—Ç —Å–ª—É—à–∞—Ç–µ–ª—å DOMContentLoaded)
    jest.isolateModules(() => {
      require('../script.js');
    });

    // üí° –ë–∞–∑–æ–≤—ã–π –º–æ–∫ fetch ‚Äî —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç JSON
    global.fetch = jest.fn((path) =>
      Promise.resolve({
        ok: true,
        json: () =>
          Promise.resolve({
            // –î–∞–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫—É –≥–æ–≤–æ—Ä–∏—Ç—å, –∫–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–∏–ª–µ—Ç–µ–ª, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –≤ DOM
            name:
              (path.includes('/en.json') && 'EN') ||
              (path.includes('/es.json') && 'ES') ||
              (path.includes('/ru.json') && 'RU'),
            subtitle: 'System-thinking PM',
            skillsTitle: 'Skills',
            skills: ['Leadership', 'System Thinking'],
            aboutTitle: 'About',
            aboutText: ['Paragraph 1', 'Paragraph 2'],
          }),
      })
    );
  });

  // --- –ú–∞—Ç—Ä–∏—Ü–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π X‚ÜíY –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä (X ‚â† Y) ---
  const pairs = [];
  for (const from of langs) for (const to of langs) if (from !== to) pairs.push([from, to]);

  test.each(pairs)(
    '–±—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ %s ‚Üí %s –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –¥–µ—Ä–≥–∞–µ—Ç –æ–±–∞ JSON',
    async (from, to) => {
      // 1) –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ EN
      document.dispatchEvent(new Event('DOMContentLoaded'));
      await flush();
      jest.advanceTimersByTime(200);

      // 2) –ï—Å–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —è–∑—ã–∫ —Ç–µ—Å—Ç–∞ –Ω–µ EN ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∫–ª–∏–∫–∞–µ–º –µ–≥–æ (–¥–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º "from")
      if (from !== 'en') {
        btn(from).click();
        await flush();
        await flush();
        jest.advanceTimersByTime(200);
        expect(btn(from)).toHaveClass('active');
      }

      // 3) –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∫–ª–∏–∫–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π —è–∑—ã–∫ "to"
      btn(to).click();

      // 4) –î–∞–¥–∏–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –ø—Ä–æ–º–∏—Å–∞–º –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º
      await flush();
      await flush();
      jest.advanceTimersByTime(200);

      // 5) –ò—Ç–æ–≥: –∞–∫—Ç–∏–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞ "to"
      expect(btn(to)).toHaveClass('active');
      langs.filter(l => l !== to).forEach(l => expect(btn(l)).not.toHaveClass('active'));

      // 6) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —è–∑—ã–∫–∞ –±—ã–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã
      const calls = global.fetch.mock.calls.map((c) => c[0]);
      expect(calls).toContain(`./lang/${to}.json`);
      // –ï—Å–ª–∏ from === 'en', —Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞, –∞ –≤—Ç–æ—Ä–æ–π ‚Äî –Ω–∞ to.
      // –î–ª—è from !== 'en' ‚Äî –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ from –∏ –Ω–∞ to.
      if (from !== 'en') {
        expect(calls).toContain(`./lang/${from}.json`);
      } else {
        expect(calls).toContain('./lang/en.json');
      }
    }
  );

  // --- –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—á–µ—á–Ω—ã–π —Ç–µ—Å—Ç –≥–æ–Ω–∫–∏ ES‚ÜíRU —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º–∏ –ø—Ä–æ–º–∏—Å–∞–º–∏ ---
  test('–≥–æ–Ω–∫–∞ ES‚ÜíRU: –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç (RU), –∑–∞–ø–æ–∑–¥–∞–ª—ã–π ES –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è', async () => {
    // –°—Ç–∞—Ä—Ç—É–µ–º
    document.dispatchEvent(new Event('DOMContentLoaded'));
    await flush(); // –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ EN
    // –î–∞–ª—å—à–µ –Ω–∞–º –Ω—É–∂–Ω–æ –¥–≤–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–∞: ES –∏ RU
    let resolveES, resolveRU;

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–≤–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–∞ fetch: —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è ES, –ø–æ—Ç–æ–º –¥–ª—è RU.
    global.fetch
      .mockImplementationOnce(
        () =>
          new Promise((res) => {
            resolveES = () =>
              res({
                ok: true,
                json: () =>
                  Promise.resolve({
                    name: 'ES',
                    subtitle: 'ES',
                    skillsTitle: 'S',
                    skills: [],
                    aboutTitle: 'A',
                    aboutText: [],
                  }),
              });
          })
      )
      .mockImplementationOnce(
        () =>
          new Promise((res) => {
            resolveRU = () =>
              res({
                ok: true,
                json: () =>
                  Promise.resolve({
                    name: 'RU',
                    subtitle: 'RU',
                    skillsTitle: 'S',
                    skills: [],
                    aboutTitle: 'A',
                    aboutText: [],
                  }),
              });
          })
      );

    const esBtn = btn('es');
    const ruBtn = btn('ru');

    // –ë—ã—Å—Ç—Ä–æ –∫–ª–∏–∫–∞–µ–º ES, –∞ –∑–∞—Ç–µ–º RU
    esBtn.click();
    ruBtn.click();

    // –ó–∞–≤–µ—Ä—à–∞–µ–º RU —Ä–∞–Ω—å—à–µ (–æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–±–µ–¥–∏—Ç—å)
    resolveRU();
    await flush();
    jest.advanceTimersByTime(200);

    // –¢–µ–ø–µ—Ä—å –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–æ–∑–¥–∞–ª—ã–π ES ‚Äî –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –∞–Ω—Ç–∏-–≥–æ–Ω–∫–æ–π
    resolveES();
    await flush();
    jest.advanceTimersByTime(200);

    const html = document.getElementById('content').innerHTML;
    expect(html).toContain('<h1>RU</h1>');
    expect(html).not.toContain('<h1>ES</h1>');
  });

  // --- –î–≤–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–ª–∏–∫–∞ –ø–æ —Ç–µ–º–µ: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —Ö–≤–æ—Å—Ç–æ–≤ –Ω–µ—Ç ---
  test('–¥–≤–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–ª–∏–∫–∞ –ø–æ —Ç–µ–º–µ: –∏—Ç–æ–≥–æ–≤–∞—è —Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, –∫–ª–∞—Å—Å—ã —Å–Ω—è—Ç—ã', async () => {
    document.dispatchEvent(new Event('DOMContentLoaded'));

    const root = document.documentElement;
    const body = document.body;
    const toggle = document.getElementById('theme-toggle');

    const start = root.getAttribute('data-theme') || 'dark';

    // –ö–ª–∏–∫ 1 ‚Üí 100–º—Å flip
    toggle.click();
    jest.advanceTimersByTime(100);

    // –ö–ª–∏–∫ 2 ‚Üí –µ—â—ë 100–º—Å flip
    toggle.click();
    jest.advanceTimersByTime(100);

    // –î–æ–∂–¥—ë–º—Å—è –ø–æ–ª–Ω–æ–≥–æ —Å–Ω—è—Ç–∏—è –∫–ª–∞—Å—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞
    jest.advanceTimersByTime(400);

    expect(body.classList.contains('theme-fade')).toBe(false);
    expect(body.classList.contains('theme-fade-active')).toBe(false);

    // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –≤–µ—Ä–Ω—É–ª –∏—Å—Ö–æ–¥–Ω—É—é —Ç–µ–º—É
    const end = root.getAttribute('data-theme');
    expect(end).toBe(start);
  });
});

